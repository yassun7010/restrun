{%- macro generate_schema(suffix, schema) -%}
{% if schema.is_literal_type %}
{{ schema.type_name + suffix }} = {{ schema.data_type.value }}

{% elif schema.type == "custom_str" %}
{{ schema.type_name + suffix }} = str

{% elif schema.type == "literal_union" %}
{{ schema.type_name + suffix }} = {{ schema.data_type }}

{% elif schema.type == "array" %}
{% if schema.data_type.need_item_data_type_def %}
{{ generate_schema("Item", schema.array_item_schema) }}
{{ schema.type_name + suffix }} = list[{{ schema.data_type.item_data_type }}Item]
{% else %}
{{ schema.type_name + suffix }} = {{ schema.data_type }}
{% endif %}

{% elif schema.type == "object" %}
{% set object = schema.data_type %}
class {{ object.type_name + suffix }}(typing_extensions.TypedDict):
{%- if object.title_and_description %}
    """
    {{ object.title_and_description | wordwrap | indent(4) }}
    """

{% endif %}
{% for name, property in object.properties.items() %}
    {{ name }}: {% if not property.required -%}typing.NotRequired[{% endif %}{{ property.data_type }}{% if not property.required %}]{% endif %}
{%- if property.title_and_description %}
    """
    {{ property.title_and_description | wordwrap | indent(4) }}
    """

{% endif %}
{% endfor %}

{% elif schema.type == "ref" %}
{{ schema.data_type.type_name + suffix }} = {{ schema.data_type }}

{% endif %}
{%- endmacro -%}

{{ auto_generated_doc_comment }}
{%- for import_module in schema.import_field_types %}
{{ import_module }}
{% endfor %}

{{ generate_schema("", schema) }}
