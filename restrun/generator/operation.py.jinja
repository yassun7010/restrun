{{ auto_generated_doc_comment }}
from typing import Self, TypedDict, NotRequired, Literal

import pydantic

from restrun.core.client import RestrunMockClient
from restrun.core.operation import GetOperation, PatchOperation, PostOperation, PutOperation, DeleteOperation
from restrun.core.model import ExtraForbidModel, Model
from restrun.core import http

{% if operation.query_parameters %}
class {{ operation.query_parameters.class_name }}(TypedDict):
{% for name, query in operation.query_parameters.fields %}
    {{ name }}: {{ query.typed_dict_field }}
{% endfor %}
{% endif %}

{% if operation.request_json_body %}
class {{ operation.request_json_body }}(TypedDict):
{% if operation.request_json_body.description %}
    """
    {{ operation.request_json_body.description | indent(4) }}
    """
    pass

{% endif %}
{% endif %}

{% if operation.request_body %}
{{ operation.request_body.class_name }} = {{ operation.request_body.origin_type }}
{% endif %}

{{ operation.response_body.class_name }} = {{ operation.response_body.origin_type }}

class {{ operation.class_name }}(
    {{ operation.method | capitalize }}Operation
):
    @classmethod
    @property
    def path(cls) -> "http.URL":
        return "{{ operation.path_name }}"

    def {{operation.method | lower}}(
        self,
{% if operation.path_parameters %}
        query: {{ query_class }},
{% endif %}
{% if operation.request_body %}
        request_body: {{ operation.request_body }}
        {%- if operation.request_body.allow_empty -%}
            = None
        {% endif %},
{% endif %}
    ) -> "{{ operation.response_body.class_name }}":
{% if operation.summary_and_description %}
        """
        {{ operation.summary_and_description | indent(8) }}
        """
{% endif %}
        return self._client.get(
            self.path,
            response_body_type={{ operation.response_body.class_name }},
        )
