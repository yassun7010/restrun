{%- set client_class = restrun.client_prefix|capitalize + "Client" -%}
{{ auto_generated_doc_comment }}
from typing import Literal

from typing_extensions import override

from restrun.core.client import RestrunClient
from restrun.exception import URLNotSupportedError

{% for resource in restrun.resources %}
from ..resources import {{ resource.module_name }}
{% endfor %}
{% if restrun.client_mixins|length != 0 %}
from .mixins import (
{% for mixin in restrun.client_mixins %}
    {{ mixin.module_name }},
{% endfor %}
)
{% endif %}


class {{ client_class }}({{ (restrun.client_mixin_path_names + ["RestrunClient"])|join(", ") }}):
{% if restrun.resources|length == 0 %}
    pass
{% elif restrun.resources|length == 1 %}
{% set resource = restrun.resources[0] %}
    @override
    def request(self, url: Literal["{{ resource.url }}"]) -> "{{resource.module_name}}.{{ resource.module_name|class_name }}Resource":
        if url is "{{ resource.url }}":
            return {{resource.module_name}}.{{ resource.module_name|class_name }}Resource(self._client)

        else:
          raise URLNotSupportedError(url)
{% else %}
{% endif %}
