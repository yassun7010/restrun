import re
from dataclasses import dataclass
from pathlib import Path
from typing import Type, TypeAlias

PythonCode: TypeAlias = str
GeneratedPythonCode: TypeAlias = str


AUTO_GENERATED_COMMENT = re.compile(r"# Code generated by restrun \".+\"\.\n")


def is_auto_generated(source: Path | PythonCode) -> bool:
    if isinstance(source, Path):
        with open(source, "r") as file:
            # NOTE: Considering that comments are placed at the top of the file,
            #       it is not necessary to read that many characters.
            code = file.read(200)
    else:
        code = source

    if len(code) == 0:
        return True

    return re.search(AUTO_GENERATED_COMMENT, code) is not None


@dataclass(frozen=True)
class ClassInfo:
    module_path: str
    class_name: str


def find_class_from_code(source: Path, class_type: Type) -> ClassInfo | None:
    """
    Find class name from generated code.
    """
    locals = {}
    with open(source, "r") as file:
        code = file.read()

    exec(code, None, locals)

    for name, variable in locals.items():
        if issubclass(variable, class_type) and variable is not class_type:
            return ClassInfo(module_path=source.stem, class_name=name)

    return None
