{%- set client_class = restrun.client_prefix|capitalize + "Client" -%}
{%- set mock_client_class = restrun.client_prefix|capitalize + "MockClient" -%}
#
# Code generated by restrun "{{ restrun.version }}".
#
# Removing this comment from this file will exclude it from automatic generation target
# and it will not be updated.
# If you wish to make special modifications to the auto-generated code,
# please remove this comment.
#
# For more information about restrun,
# please refer to https://github.com/yassun7010/restrun .
#
from typing import Self, Literal, overload
from typing_extensions import override

from restrun.core.client import RestrunMockClient
from restrun.exception import RestrunError

from .client import {{ client_class }}
{%- if restrun.client_mixins|length != 0 %}
from .mixins import (
{%- for mixin in restrun.client_mixins %}
    {{ mixin.module_name }},
{%- endfor %}
)
{% endif %}

{% for resource in restrun.resources %}
{% for request_info in resource.methods %}
from ..resources.{{ resource.module_name }} import {{ request_info.module_name }}
{% endfor %}
{% endfor %}

class {{ mock_client_class }}({{ (restrun.mock_client_mixin_path_names + ["RestrunMockClient", client_class])|join(", ") }}):
{% if restrun.get_request_infos|length == 0 %}
{% elif restrun.get_request_infos|length == 1 %}
{% set request_info = restrun.get_request_infos[0] %}
    @override
    def inject_get_response_body(self, url: Literal["{{ request_info.class_type.url() }}"], response_body: {{ request_info.module_name }}.{{ request_info.class_name }}ResponseBody | RestrunError) -> "Self":
        self._client.inject_get_response_body(url, response_body)

        return self
{% else %}
{% for request_info in restrun.get_request_infos %}
    @overload
    def inject_get_response_body(self, url: Literal["{{ request_info.class_type.url() }}"], response_body: {{ request_info.module_name }}.{{ request_info.class_name }}ResponseBody | RestrunError) -> "Self":
        ...
{% endfor %}

    @override
    def inject_get_response_body(self, url, response_body):
        self._client.inject_get_response_body(url, response_body)

        return self
{% endif %}
